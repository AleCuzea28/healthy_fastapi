{
  "info": {
    "_postman_id": "bdad2ee7-48d5-41ef-9902-a0b734b54258",
    "name": "tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
    "_exporter_id": "28458234"
  },
  "item": [
    {
      "name": "User",
      "item": [
        {
          "name": "Get all users with username and email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "let jsonResponse = pm.response.json();\r",
                  "console.log(jsonResponse);\r",
                  "\r",
                  "pm.test('Check if username and email properties are contained in each record' , () => {\r",
                  "    _.each(jsonResponse, (item) => {\r",
                  "        pm.expect(item).to.have.property('username');\r",
                  "        pm.expect(item).to.have.property('email');\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.test('Check if every record is an object ' , () => {\r",
                  "    _.each(jsonResponse, (item) => {\r",
                  "        pm.expect(item).to.be.an(\"object\");\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/task2"
          },
          "response": []
        },
        {
          "name": "Create user - pass",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "//body -- collection variables\r",
                  "let jsonResponse = pm.response.json()\r",
                  "let jsonRequest = JSON.parse(pm.request.body.raw);\r",
                  "\r",
                  "\r",
                  "pm.collectionVariables.set(\"usernameCVar\", jsonRequest.username);\r",
                  "pm.collectionVariables.set(\"emailCVar\", jsonRequest.email);\r",
                  "pm.collectionVariables.set(\"heightCVar\", jsonRequest.height);\r",
                  "pm.collectionVariables.set(\"weightCVar\", jsonRequest.weight);\r",
                  "pm.collectionVariables.set(\"birthdateCVar\", jsonRequest.birthdate);\r",
                  "\r",
                  "//body -- tests\r",
                  "pm.test(\"Body matches username\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"usernameCVar\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Checking data types\", function () {\r",
                  "    pm.expect(jsonRequest.username).to.be.an(\"string\");\r",
                  "    pm.expect(jsonRequest.email).to.be.an(\"string\");\r",
                  "    pm.expect(jsonRequest.height).to.be.an(\"number\");\r",
                  "    pm.expect(jsonRequest.weight).to.be.an(\"number\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"Iliana\",\r\n    \"email\": \"iliana@gmail.com\",\r\n    \"height\": 1.60,\r\n    \"weight\": 70,\r\n    \"birthdate\": \"1998-11-21\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/task1",
              "host": ["{{base_url}}"],
              "path": ["task1"],
              "query": [
                {
                  "key": "username",
                  "value": "ana",
                  "disabled": true
                },
                {
                  "key": "start",
                  "value": "2024-01-01",
                  "disabled": true
                },
                {
                  "key": "end",
                  "value": "2024-01-03",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get custom user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "\r",
                  "let jsonResponse = pm.response.json();\r",
                  "console.log(pm.response.json())\r",
                  "//body -- collection variables\r",
                  "\r",
                  "\r",
                  "// pm.collectionVariables.set(\"usernameEnv\", jsonRequest.username);\r",
                  "// pm.collectionVariables.set(\"emailEnv\", jsonRequest.email);\r",
                  "// pm.collectionVariables.set(\"heightEnv\", jsonRequest.height);\r",
                  "// pm.collectionVariables.set(\"weightEnv\", jsonRequest.weight);\r",
                  "// pm.collectionVariables.set(\"birthdateEnv\", jsonRequest.birthdate);\r",
                  "\r",
                  "\r",
                  "// console.log(pm.collectionVariables.get(\"usernameEnv\"));\r",
                  "\r",
                  "// //body -- tests\r",
                  "// pm.test(\"Body matches username\", function () {\r",
                  "//     pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"usernameEnv\"));\r",
                  "// });\r",
                  "\r",
                  "pm.test(\"Checking data types\", function () {\r",
                  "    pm.expect(jsonResponse.username).to.be.an(\"string\");\r",
                  "    pm.expect(jsonResponse.email).to.be.an(\"string\");\r",
                  "    pm.expect(jsonResponse.height).to.be.an(\"number\");\r",
                  "    pm.expect(jsonResponse.weight).to.be.an(\"number\");\r",
                  "    pm.expect(jsonResponse.age).to.be.an(\"number\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Checking values\", function () {\r",
                  "    pm.expect(jsonResponse.username).to.eql(pm.collectionVariables.get(\"usernameCVar\"));\r",
                  "    pm.expect(jsonResponse.email).to.eql(pm.collectionVariables.get(\"emailCVar\"));\r",
                  "    pm.expect(jsonResponse.height).to.eql(pm.collectionVariables.get(\"heightCVar\"));\r",
                  "    pm.expect(jsonResponse.weight).to.eql(pm.collectionVariables.get(\"weightCVar\"));\r",
                  "    // pm.expect(jsonResponse.age).to.eql(pm.collectionVariables.get(\"usernameCVar\"));\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/task3?username={{usernameCVar}}",
              "host": ["{{base_url}}"],
              "path": ["task3"],
              "query": [
                {
                  "key": "username",
                  "value": "{{usernameCVar}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update custom user fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "let jsonResponse = pm.response.json()\r",
                  "let jsonRequest = JSON.parse(pm.request.body.raw);\r",
                  "console.log(jsonRequest)\r",
                  "\r",
                  "\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.response.to.have.body(`{\"message\":\"User's data modified\"}`);\r",
                  "});\r",
                  "\r",
                  "//set possible user profile changes\r",
                  "pm.collectionVariables.set(\"emailCVar\", jsonRequest.email);\r",
                  "pm.collectionVariables.set(\"heightCVar\", jsonRequest.height);\r",
                  "pm.collectionVariables.set(\"weightCVar\", jsonRequest.weight);\r",
                  "\r",
                  "pm.test(\"New value is checked\", function () {\r",
                  "    pm.expect(jsonRequest.email).to.equal(pm.collectionVariables.get(\"emailCVar\"));\r",
                  "    pm.expect(jsonRequest.height).to.equal(pm.collectionVariables.get(\"heightCVar\"));\r",
                  "    pm.expect(jsonRequest.weight).to.equal(pm.collectionVariables.get(\"weightCVar\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Checking data types\", function () {\r",
                  "    pm.expect(jsonRequest.username).to.be.an(\"string\");\r",
                  "    pm.expect(jsonRequest.email).to.be.an(\"string\");\r",
                  "    pm.expect(jsonRequest.height).to.be.an(\"number\");\r",
                  "    pm.expect(jsonRequest.weight).to.be.an(\"number\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"Iliana\",\r\n    \"email\": \"iliana@gmail.com\",\r\n    \"height\": 1.60,\r\n    \"weight\": 80,\r\n    \"birthdate\": \"1998-11-21\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/task5",
              "host": ["{{base_url}}"],
              "path": ["task5"],
              "query": [
                {
                  "key": "username",
                  "value": "Ene",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete custom user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(\"User deleted message check\", function () {\r",
                  "    pm.response.to.have.body('{\"message\":\"User deleted\"}');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/task4?username={{usernameCVar}}",
              "host": ["{{base_url}}"],
              "path": ["task4"],
              "query": [
                {
                  "key": "username",
                  "value": "{{usernameCVar}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Meal",
      "item": [
        {
          "name": "Create user - pass - for meal",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "//body -- collection variables\r",
                  "let jsonResponse = pm.response.json()\r",
                  "let jsonRequest = JSON.parse(pm.request.body.raw);\r",
                  "\r",
                  "\r",
                  "pm.collectionVariables.set(\"usernameCVar\", jsonRequest.username);\r",
                  "pm.collectionVariables.set(\"emailCVar\", jsonRequest.email);\r",
                  "pm.collectionVariables.set(\"heightCVar\", jsonRequest.height);\r",
                  "pm.collectionVariables.set(\"weightCVar\", jsonRequest.weight);\r",
                  "pm.collectionVariables.set(\"birthdateCVar\", jsonRequest.birthdate);\r",
                  "\r",
                  "//body -- tests\r",
                  "pm.test(\"Body matches username\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"usernameCVar\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Checking data types\", function () {\r",
                  "    pm.expect(jsonRequest.username).to.be.an(\"string\");\r",
                  "    pm.expect(jsonRequest.email).to.be.an(\"string\");\r",
                  "    pm.expect(jsonRequest.height).to.be.an(\"number\");\r",
                  "    pm.expect(jsonRequest.weight).to.be.an(\"number\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"Iliana\",\r\n    \"email\": \"iliana@gmail.com\",\r\n    \"height\": 1.60,\r\n    \"weight\": 70,\r\n    \"birthdate\": \"1998-11-21\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/task1",
              "host": ["{{base_url}}"],
              "path": ["task1"],
              "query": [
                {
                  "key": "username",
                  "value": "ana",
                  "disabled": true
                },
                {
                  "key": "start",
                  "value": "2024-01-01",
                  "disabled": true
                },
                {
                  "key": "end",
                  "value": "2024-01-03",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create meal for a user profile - today",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "let jsonResponse = pm.response.json();",
                  "console.log(pm.response.json())",
                  "",
                  "pm.test(\"Checking data types\", function () {",
                  "    pm.expect(jsonResponse.username).to.be.an(\"string\");",
                  "    pm.expect(jsonResponse.mealdate).to.be.an(\"string\");",
                  "    pm.expect(jsonResponse.meal).to.be.an(\"object\");",
                  "    pm.expect(jsonResponse.meal.name).to.be.an(\"string\");",
                  "    pm.expect(jsonResponse.meal.calories).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.serving_size_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.fat_total_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.fat_saturated_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.protein_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.sodium_mg).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.potassium_mg).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.cholesterol_mg).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.carbohydrates_total_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.fiber_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.sugar_g).to.be.an(\"number\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Checking values\", function () {",
                  "    pm.expect(jsonResponse.username).to.eql(pm.collectionVariables.get(\"usernameCVar\"));",
                  "    pm.expect(jsonResponse.mealdate).to.eql(pm.collectionVariables.get(\"today\"));",
                  "    pm.expect(jsonResponse.meal.name).to.eql(pm.collectionVariables.get(\"mealNameOpt1\"));",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "",
                  "pm.collectionVariables.set('currentDate', moment().format((\"YYYY-MM-DD\")));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/task6?username={{usernameCVar}}&mealdate={{currentDate}}&mealname={{mealNameOpt1}}",
              "host": ["{{base_url}}"],
              "path": ["task6"],
              "query": [
                {
                  "key": "username",
                  "value": "{{usernameCVar}}"
                },
                {
                  "key": "mealdate",
                  "value": "{{currentDate}}"
                },
                {
                  "key": "mealname",
                  "value": "{{mealNameOpt1}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create meal for a user profile - another day",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "let jsonResponse = pm.response.json();",
                  "console.log(pm.response.json())",
                  "",
                  "pm.test(\"Checking data types\", function () {",
                  "    pm.expect(jsonResponse.username).to.be.an(\"string\");",
                  "    pm.expect(jsonResponse.mealdate).to.be.an(\"string\");",
                  "    pm.expect(jsonResponse.meal).to.be.an(\"object\");",
                  "    pm.expect(jsonResponse.meal.name).to.be.an(\"string\");",
                  "    pm.expect(jsonResponse.meal.calories).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.serving_size_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.fat_total_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.fat_saturated_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.protein_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.sodium_mg).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.potassium_mg).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.cholesterol_mg).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.carbohydrates_total_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.fiber_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.meal.sugar_g).to.be.an(\"number\");",
                  "});",
                  "",
                  "pm.test(\"Checking values\", function () {",
                  "    pm.expect(jsonResponse.username).to.eql(pm.collectionVariables.get(\"usernameCVar\"));",
                  "    pm.expect(jsonResponse.mealdate).to.eql(pm.collectionVariables.get(\"anotherDay\"));",
                  "    pm.expect(jsonResponse.meal.name).to.eql(pm.collectionVariables.get",
                  "    (\"mealNameOpt2\"));",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/task6?username={{usernameCVar}}&mealdate={{anotherDay}}&mealname={{mealNameOpt2}}",
              "host": ["{{base_url}}"],
              "path": ["task6"],
              "query": [
                {
                  "key": "username",
                  "value": "{{usernameCVar}}"
                },
                {
                  "key": "mealdate",
                  "value": "{{anotherDay}}"
                },
                {
                  "key": "mealname",
                  "value": "{{mealNameOpt2}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get meals on a period of time",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "let jsonResponse = pm.response.json();",
                  "",
                  "pm.test('Check if username, mealdate and meal properties are contained in each record' , () => {",
                  "    _.each(jsonResponse, (item) => {",
                  "        pm.expect(item).to.have.property('username');",
                  "        pm.expect(item).to.have.property('mealdate');",
                  "        pm.expect(item).to.have.property('meal');",
                  "    });",
                  "});",
                  "",
                  "pm.test('Check if every record is an object ' , () => {",
                  "    _.each(jsonResponse, (item) => {",
                  "        pm.expect(item).to.be.an(\"object\");",
                  "    });",
                  "});",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/task7?username={{usernameCVar}}&startdate={{startDate}}&enddate={{endDate}}",
              "host": ["{{base_url}}"],
              "path": ["task7"],
              "query": [
                {
                  "key": "username",
                  "value": "{{usernameCVar}}"
                },
                {
                  "key": "startdate",
                  "value": "{{startDate}}"
                },
                {
                  "key": "enddate",
                  "value": "{{endDate}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Edit meal from the same day",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "let jsonResponse = pm.response.json()",
                  "",
                  "let paramDate = pm.collectionVariables.get(\"today\");",
                  "console.log(paramDate);",
                  "",
                  "pm.test(\"Body is correct\", function () {",
                  "    pm.response.to.have.body(`{\"message\":\"User meal modified\"}`);",
                  "});",
                  "",
                  "const currentDate = new Date();",
                  "",
                  "const year = currentDate.getFullYear();",
                  "let month = currentDate.getMonth() + 1; // Adding 1 because getMonth() returns month from 0 to 11",
                  "month = month < 10 ? '0' + month : month; // Adding leading zero if month is a single digit",
                  "",
                  "let day = currentDate.getDate();",
                  "day = day < 10 ? '0' + day : day; // Adding leading zero if day is a single digit",
                  "",
                  "const formattedDate = `${year}-${month}-${day}`;",
                  "console.log(formattedDate)",
                  "",
                  "",
                  "pm.test(\"Check date\", function () {",
                  "    pm.expect(paramDate).to.equal(formattedDate);",
                  "});",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/task9?username={{usernameCVar}}&mealname_old={{mealNameOpt1}}&mealname_new={{mealNameOpt3}}&day={{today}}",
              "host": ["{{base_url}}"],
              "path": ["task9"],
              "query": [
                {
                  "key": "username",
                  "value": "{{usernameCVar}}"
                },
                {
                  "key": "mealname_old",
                  "value": "{{mealNameOpt1}}"
                },
                {
                  "key": "mealname_new",
                  "value": "{{mealNameOpt3}}"
                },
                {
                  "key": "day",
                  "value": "{{today}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get total calories from a given day",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "let jsonResponse = pm.response.json();",
                  "console.log(pm.response.json())",
                  "",
                  "pm.test(\"Checking data types\", function () {",
                  "    pm.expect(jsonResponse.calories).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.serving_size_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.fat_total_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.fat_saturated_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.protein_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.sodium_mg).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.potassium_mg).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.cholesterol_mg).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.carbohydrates_total_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.fiber_g).to.be.an(\"number\");",
                  "    pm.expect(jsonResponse.sugar_g).to.be.an(\"number\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/task10?username={{usernameCVar}}&day={{today}}",
              "host": ["{{base_url}}"],
              "path": ["task10"],
              "query": [
                {
                  "key": "username",
                  "value": "{{usernameCVar}}"
                },
                {
                  "key": "day",
                  "value": "{{today}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get chart based on user meal values",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "//check header for image",
                  "pm.test(\"Content-Type header is application/json\", () => {",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.be.eql('image/png');",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/task11?username={{usernameCVar}}&start={{startDate}}&end={{endDate}}",
              "host": ["{{base_url}}"],
              "path": ["task11"],
              "query": [
                {
                  "key": "username",
                  "value": "{{usernameCVar}}"
                },
                {
                  "key": "start",
                  "value": "{{startDate}}"
                },
                {
                  "key": "end",
                  "value": "{{endDate}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete meal from today - pass",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "pm.test(\"User meal is deleted\", function () {",
                  "    pm.response.to.have.body('{\"message\":\"User meal deleted\"}');",
                  "});",
                  "",
                  "// const currentDate = new Date();",
                  "",
                  "// const year = currentDate.getFullYear();",
                  "// let month = currentDate.getMonth() + 1; // Adding 1 because getMonth() returns month from 0 to 11",
                  "// month = month < 10 ? '0' + month : month; // Adding leading zero if month is a single digit",
                  "",
                  "// let day = currentDate.getDate();",
                  "// day = day < 10 ? '0' + day : day; // Adding leading zero if day is a single digit",
                  "",
                  "// const formattedDate = `${year}-${month}-${day}`;",
                  "// console.log({formattedDate})",
                  "",
                  "// pm.test(\"Checking date\", function () {",
                  "//     pm.expect(jsonResponse.mealdate).to.eql({formattedDate});",
                  "// });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/task8?username={{usernameCVar}}&mealname={{mealNameOpt1}}",
              "host": ["{{base_url}}"],
              "path": ["task8"],
              "query": [
                {
                  "key": "username",
                  "value": "{{usernameCVar}}"
                },
                {
                  "key": "mealname",
                  "value": "{{mealNameOpt1}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Should fail",
      "item": [
        {
          "name": "Create user - fail - email verification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "let jsonRequest = JSON.parse(pm.request.body.raw);\r",
                  "console.log(jsonRequest.email)\r",
                  "\r",
                  "pm.test(\"Second verification for email address\", function () {\r",
                  "    pm.expect(jsonRequest.email).to.include(\"@\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"Melisa\",\r\n    \"email\": \"mpop\",\r\n    \"height\": 1.50,\r\n    \"weight\": 60,\r\n    \"birthdate\": \"2002-11-01\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/task1",
              "host": ["{{base_url}}"],
              "path": ["task1"],
              "query": [
                {
                  "key": "username",
                  "value": "ana",
                  "disabled": true
                },
                {
                  "key": "start",
                  "value": "2024-01-01",
                  "disabled": true
                },
                {
                  "key": "end",
                  "value": "2024-01-03",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update custom user fields - fail - email verification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "let jsonResponse = pm.response.json()\r",
                  "let jsonRequest = JSON.parse(pm.request.body.raw);\r",
                  "console.log(jsonRequest)\r",
                  "\r",
                  "\r",
                  "pm.test(\"Body is correct\", function () {\r",
                  "    pm.response.to.have.body(`{\"message\":\"User's data modified\"}`);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Second verification for email address\", function () {\r",
                  "    pm.expect(jsonRequest.email).to.include(\"@\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"Meri\",\r\n    \"email\": \"meri\",\r\n    \"height\": 1.50,\r\n    \"weight\": 80,\r\n    \"birthdate\": \"2002-01-01\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/task5",
              "host": ["{{base_url}}"],
              "path": ["task5"],
              "query": [
                {
                  "key": "username",
                  "value": "Ene",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete meal from today - fail - date verification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "pm.test(\"User is deleted\", function () {",
                  "    pm.response.to.have.body('{\"message\":\"User meal deleted\"}');",
                  "});",
                  "",
                  "// const currentDate = new Date();",
                  "",
                  "// const year = currentDate.getFullYear();",
                  "// let month = currentDate.getMonth() + 1; // Adding 1 because getMonth() returns month from 0 to 11",
                  "// month = month < 10 ? '0' + month : month; // Adding leading zero if month is a single digit",
                  "",
                  "// let day = currentDate.getDate();",
                  "// day = day < 10 ? '0' + day : day; // Adding leading zero if day is a single digit",
                  "",
                  "// const formattedDate = `${year}-${month}-${day}`;",
                  "// console.log({formattedDate})",
                  "",
                  "// pm.test(\"Checking date\", function () {",
                  "//     pm.expect(jsonResponse.mealdate).to.eql({formattedDate});",
                  "// });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/task8?username={{usernameCVar}}&mealname={{mealNameOpt2}}",
              "host": ["{{base_url}}"],
              "path": ["task8"],
              "query": [
                {
                  "key": "username",
                  "value": "{{usernameCVar}}"
                },
                {
                  "key": "mealname",
                  "value": "{{mealNameOpt2}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "//status code",
          "pm.test(\"Status code is 200\", function () {",
          "    pm.response.to.have.status(200);",
          "});",
          "",
          "//performace",
          "pm.test(\"Response time is less than 200ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(200);",
          "});",
          "",
          "//check header",
          "pm.test(\"Content-Type header is application/json\", () => {",
          "  pm.expect(pm.response.headers.get('Content-Type')).to.be.oneOf(['application/json','image/png']);",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "usernameCVar",
      "value": ""
    },
    {
      "key": "emailCVar",
      "value": ""
    },
    {
      "key": "heightCVar",
      "value": ""
    },
    {
      "key": "weightCVar",
      "value": ""
    },
    {
      "key": "birthdateCVar",
      "value": ""
    },
    {
      "key": "today",
      "value": "2024-01-03"
    },
    {
      "key": "mealNameOpt1",
      "value": "pasta"
    },
    {
      "key": "currentDate",
      "value": "2024-01-02"
    },
    {
      "key": "anotherDay",
      "value": "2024-01-02"
    },
    {
      "key": "mealNameOpt2",
      "value": "taco"
    },
    {
      "key": "startDate",
      "value": "2024-01-01"
    },
    {
      "key": "endDate",
      "value": "2024-01-10"
    },
    {
      "key": "mealNameOpt3",
      "value": "burger"
    },
    {
      "key": "base_url",
      "value": "http://localhost:8000/users"
    }
  ]
}
